# -*- mode:org; indent-tabs-mode:nil; tab-width:2 -*-
#+title: Plan

* TODO Plan
- Follow https://github.com/bbatsov/ruby-style-guide and https://github.com/styleguide/ruby , also TomDoc for comments.
- Implement =setFavorites/Loved= for =GroovesharkList= and =LastFMList=.
  - Separate searching for favorite candidates and setting favorites.
- Use each on getters and setters of lists to provide verbose mode. They (should) e.g. return the added songs.
- Add examples to documentation as in Tomdoc specification?
- Use Module#ancestor and methods and respond_to for deciding which lists to sync between.
- Define <=> in Song and mixin Comparable. Implement in terms of casecmp of strings and implement eql? in terms of <=>. Makes sort possible in SongList?
- What status should be sent to exit in LastfmList#authorize?
- Use YAML.dump to store Last.fm token?
- Allow the following example:
  #+begin_src ruby
    # Get favorites
    groove_favs  = GroovesharkList.new(username, password)
    last_fm_favs = LastFMList.new(username, password)
    # Get favorites by fetching them and store them in a SongList
    # Do in threads
    groove_favs.getFavorites
    last_fm_favs.getFavorites

    # Sync favorites by adding the difference of the argument and the
    # receiver as favorites, i.e.
    # 1. Calculate the difference.
    # 2. Add favorites one song at the time as the API works that
    #    way.
    # Do in threads
    groove_favs.syncFavorites
    last_fm_favs.syncFavorites
  #+end_src
- Text user interface:
  1. (Choose services. Default: Grooveshark and last.fm).
  2. Choose direction. Default: both ways.
  3. If verbose show fetched favorites.
  4. Show which favorites to sync and ask if it shall continue (option for not syncing some songs).
  5. If verbose show which favorites that are synced.
  6. Show how many favorites that are synced.
- Use Ruby threads for getting and setting data, e.g.
  1. Threads for getting data.
  2. Sync and differentiate.
  3. Threads for setting data.
  4. Sync and results.
- Use hash style parameters for initializer, see PickAxe p. 84.
  #+begin_src ruby
    def hash_parameters(params)
      # Raise error if either is not given
      unless artist = params[:artist] or puts title = params[:title]
        raise Error                 # Change to some appropriate error
      end
    end

    hash_parameters(:artist => "Artist", :title => "Title")
    hash_parameters(:artist => "Artist")
    hash_parameters(:title => "Title")
  #+end_src
- Use hash style parameters for =add= so that it also can have the following functionality (i.e. take artist and title rather than song as parameter):
  #+begin_src ruby
    # Public: Adds a song with the given artist and title to the list.
    #
    # artist - The artist of the song to add.
    # title  - The title of the song to add.
    #
    # Returns the song list to enable chaining of calls to this
    #   method.
    def add(artist, title)
      add(Song.new(artist, title))
    end
  #+end_src
- Include the README in the documentation of the main class.
- Use Rake to make tests http://stackoverflow.com/q/9017158/789593
** Gem
- Use Bundler and Rake (PickAxe p. 22-230) to create a gem.
- Refer from gemspec to main test suite via =s.test_file=.
- Filter out relevant files for inclusion in gem via =candidates= and =Dir.glob=.
- Run tomdoc via command similar to =s.has_rdoc= and =s.extra_rdoc_files=.
- Add dependicies to Ruby wrappers for GrooveShark and Last.fm.
- Add it to RubyForge.
- Used gems:
  - sudo gem install grooveshark
  - sudo gem install lastfm
  - sudo gem install launchy
** README
- Reference to docs
- Copyright and license
