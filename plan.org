* Guidelines
- Structure: As Ruby gems http://stackoverflow.com/questions/614309/ideal-ruby-project-structure
- Style https://github.com/styleguide/ruby , also TomDoc forcomments.
* TODO Plan
- Allow the following example:
  #+begin_src ruby
    # Get favorites
    groove_favs  = GrooveSharkList.new
    last_fm_favs = LastFMList.new
    # Get favorites by fetching them and store them in a SongList
    groove_favs.getFavorites(username, password)
    last_fm_favs.getFavorites(username, password)
    
    # Sync favorites by adding the difference of the argument and the
    # receiver as favorites, i.e.
    # 1. Calculate the difference.
    # 2. Add favorites one song at the time as the API works that
    #    way.
    groove_favs.syncFavorites(username, password, last_fm_favs) # last_fm_favs - groove_favs
    # to add as a favorites
    last_fm_favs.syncFavorites(username, password, groove_favs) # groove_favs - last_fm_favs
    # to add as favorites
  #+end_src
- Implement =syncFavorites= for the subclasses =GrooveSharkList= and =LastFMList= of =SongList=.
- Implement the (private?) method =songsToSync= in terms of difference (i.e. - operator) in =SongList=.
- Use hash style parameters for initializer, see PickAxe p. 84.
  #+begin_src ruby
    def hash_parameters(params)
      # Raise error if either is not given
      unless artist = params[:artist] or puts title = params[:title]
        raise Error                 # Change to some appropriate error
      end
    end

    hash_parameters(:artist => "Artist", :title => "Title")
    hash_parameters(:artist => "Artist")
    hash_parameters(:title => "Title")
  #+end_src
- Use hash style parameters for =add= so that it also can have the following functionality (i.e. take artist and title rather than song as parameter):
  #+begin_src ruby
    # Public: Adds a song with the given artist and title to the list.
    #
    # artist - The artist of the song to add.
    # title  - The title of the song to add.
    #
    # Returns the song list to enable chaining of calls to this
    #   method.
    def add(artist, title)
      add(Song.new(artist, title))
    end
  #+end_src
- Use Ruby threads for getting and setting data, e.g.
  1. Threads for getting data.
  2. Sync and differentiate.
  3. Threads for setting data.
  4. Sync and results.
- Include the README in the documentation of the main class.
