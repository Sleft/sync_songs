# -*- mode:org; indent-tabs-mode:nil; tab-width:2 -*-
#+title: Plan

* TODO Plan
- Move services files to a subdirectory of lib and test.
- Complete diff.
- Split Controller into severa classes, e.g. one for sync and one for diff?
- Make service CLIs subclasses of CLI? Would this violate [[http://en.wikipedia.org/wiki/Liskov_substitution_principle][LSP]]?
- Rescue SocketError half way through sync/diff. Try sync/diff by disabling connecting halfway through it and see where it fails and rescue that if appropriate.
- Add option to write accepted songs so far in interactive mode.
- Add tests for all new things.
  - Add tests for songs with album.
- Use watir for testing last.fm auth.
- Use safe version operators in gemspec.
- Go through all documentation and fix it.
- Follow https://github.com/bbatsov/ruby-style-guide and https://github.com/styleguide/ruby , also TomDoc for comments.
- Add examples to documentation as in Tomdoc specification?
- Add argument types to documentation, from Tomdoc: "The expected type (or types) of each argument SHOULD be clearly indicated in the explanation. When you specify a type, use the proper classname of the type (for instance, use 'String' instead of 'string' to refer to a String type)."
- Write a guide for adding new services.
- Make singleton classes that can carry API keys and passwords for a particular user so that one can check if such an instance is running and use it rather than asking the user for the same password again.
- Add the class CSVSet and its ui CSVCLI. Use the standard CSV class.
  - It should only have one type of data so alias getFavorites with getLibrary.
  - Test it with StringIO instead of a separate sample data file, see PickAxe p. 736.
- Use YAML.dump and lib tmpdir to store Last.fm token?
- Allow the following example:
  #+begin_src ruby
    # Get favorites
    groove_favs  = GroovesharkSet.new(username, password)
    last_fm_favs = LastFMSet.new(username, password)
    # Get favorites by fetching them and store them in a SongSet
    # Do in threads
    groove_favs.getFavorites
    last_fm_favs.getFavorites

    # Sync favorites by adding the difference of the argument and the
    # receiver as favorites, i.e.
    # 1. Calculate the difference.
    # 2. Add favorites one song at the time as the API works that
    #    way.
    # Do in threads
    groove_favs.syncFavorites
    last_fm_favs.syncFavorites
  #+end_src
- Text user interface:
  1. (Choose services. Default: Grooveshark and last.fm).
  2. Choose direction. Default: both ways.
  3. If verbose show fetched favorites.
  4. Show which favorites to sync and ask if it shall continue (option for not syncing some songs).
  5. If verbose show which favorites that are synced.
  6. Show how many favorites that are synced.
- Use Ruby threads for getting and setting data, e.g.
  1. Threads for getting data.
  2. Sync and differentiate.
  3. Threads for setting data.
  4. Sync and results.
- Use hash style parameters for initializer, see PickAxe p. 84.
  #+begin_src ruby
    def hash_parameters(params)
      # Raise error if either is not given
      unless artist = params[:artist] or puts title = params[:title]
        raise Error                 # Change to some appropriate error
      end
    end

    hash_parameters(:artist => "Artist", :title => "Title")
    hash_parameters(:artist => "Artist")
    hash_parameters(:title => "Title")
  #+end_src
- Use hash style parameters for =add= so that it also can have the following functionality (i.e. take artist and title rather than song as parameter):
  #+begin_src ruby
    # Public: Adds a song with the given artist and title to the set.
    #
    # artist - The artist of the song to add.
    # title  - The title of the song to add.
    #
    # Returns the song set to enable chaining of calls to this
    #   method.
    def add(artist, title)
      add(Song.new(artist, title))
    end
  #+end_src
- Include the README in the documentation of the main class.
- Use Rake to make tests http://stackoverflow.com/q/9017158/789593
** Gem
- Use Bundler and Rake (PickAxe p. 22-230) to create a gem.
- Refer from gemspec to main test suite via =s.test_file=.
- Filter out relevant files for inclusion in gem via =candidates= and =Dir.glob=.
- Run tomdoc via command similar to =s.has_rdoc= and =s.extra_rdoc_files=.
- Add dependicies to Ruby wrappers for GrooveShark and Last.fm.
- Add it to RubyForge.
- Used gems:
  - sudo gem install grooveshark
  - sudo gem install lastfm
  - sudo gem install launchy
  - sudo gem install thor
  - sudo gem install highline
** README
- Reference to docs
- Copyright and license
- Skeleton
  #+begin_src text
    # Sync::Songs

    TODO: Write a gem description

    ## Installation

    Add this line to your application's Gemfile:

        gem 'sync_songs'

    And then execute:

        $ bundle

    Or install it yourself as:

        $ gem install sync_songs

    ## Usage

    TODO: Write usage instructions here

    ## Contributing

    1. Fork it
    2. Create your feature branch (`git checkout -b my-new-feature`)
    3. Commit your changes (`git commit -am 'Add some feature'`)
    4. Push to the branch (`git push origin my-new-feature`)
    5. Create new Pull Request
  #+end_src
