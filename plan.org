# -*- mode:org; indent-tabs-mode:nil; tab-width:2 -*-
#+title: Plan

* TODO Plan
- Fix diff not using strict search (strict search in Struct defaults to nil).
- Move error handling to service controllers that calls their CLIs. Main controller should not have to know about services.
- Complete diff.
- Create SongSet.add method that can take the parameters that the constructor of Song takes?
- Split Controller into several classes, e.g. one for sync and one for diff?
- Rescue SocketError half way through sync/diff. Try sync/diff by disabling connecting halfway through it and see where it fails and rescue that if appropriate.
- Add tests for all new things.
  - Add tests for songs with album.
- Use watir for testing last.fm auth.
- Use safe version operators in gemspec.
- Go through all documentation and fix it.
- Follow https://github.com/bbatsov/ruby-style-guide and https://github.com/styleguide/ruby , also TomDoc for comments.
- Add examples to documentation as in Tomdoc specification?
- Add argument types to documentation, from Tomdoc: "The expected type (or types) of each argument SHOULD be clearly indicated in the explanation. When you specify a type, use the proper classname of the type (for instance, use 'String' instead of 'string' to refer to a String type)."
- Write a guide for adding new services.
- Make singleton classes that can carry API keys and passwords for a particular user so that one can check if such an instance is running and use it rather than asking the user for the same password again.
- Add the class CSVSet and its ui CSVCLI. Use the standard CSV class.
  - It should only have one type of data so alias getFavorites with getLibrary.
  - Test it with StringIO instead of a separate sample data file, see PickAxe p. 736.
- Consider adding support for the following: librefm, gogoyoko, jamendo.
- Use YAML.dump and lib tmpdir to store Last.fm token?
- Include the README in the documentation of the main class.
- Use Rake to make tests http://stackoverflow.com/q/9017158/789593
- Integrate with Travis CI to automate tests.
** Gem
- Use Bundler and Rake (PickAxe p. 22-230) to create a gem.
- Refer from gemspec to main test suite via =s.test_file=.
- Filter out relevant files for inclusion in gem via =candidates= and =Dir.glob=.
- Run tomdoc via command similar to =s.has_rdoc= and =s.extra_rdoc_files=.
- Add dependicies to Ruby wrappers for GrooveShark and Last.fm.
- Add it to RubyForge.
- Used gems:
  - sudo gem install grooveshark
  - sudo gem install lastfm
  - sudo gem install launchy
  - sudo gem install thor
  - sudo gem install highline
