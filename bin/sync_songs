#!/usr/bin/env ruby
# -*- coding: utf-8; mode: ruby -*-

require 'thor'
require_relative '../lib/sync_songs.rb'

# Public: Classes for syncing sets of songs.
module SyncSongs
  class Cli < Thor
    class_option :verbose, type: :boolean, aliases: '-v',
    desc: 'Explain what is being done'
    class_option :debug, type: :boolean, desc: 'Debug mode'
    class_option :color, type: :boolean, desc: 'Color mode'
    services_option = [:services, {type: :array, required: true,
                         banner: Controller::INPUT_FORM,
                         desc: 'At least two users or file paths '\
                         'each paired with a service and a type, '\
                         'e.g. -s user1:grooveshark:favorites '\
                         'songs.csv:csv:library',
                         aliases: '-s'}]

    desc 'sync', 'Sync sets of songs'
    long_desc <<-LONGDESC
    WRITE!!!
   LONGDESC
    method_option(*services_option)
    def sync
      setupController
      @controller.sync
    end

    desc 'diff', 'Diff sets of songs'
    long_desc <<-LONGDESC
    #   WRITE!!!
     LONGDESC
    method_option(*services_option)
    def diff
      setupController
      @controller.diff
    end

    desc 'supp', 'List supported services'
    long_desc <<-LONGDESC
  Prints a list of the supported services.
     LONGDESC
    def supp
      @controller = Controller.new(CLI.new(options[:verbose],
                                           options[:debug],
                                           options[:color]),
                                   nil)
      @controller.showSupportedServices
    end

    desc 'version', 'Shows the version number'
    long_desc <<-LONGDESC
  Prints the version number. Please include this in bug reports.
     LONGDESC
    def version
      puts "#{$PROGRAM_NAME} #{VERSION}"
    end

    private

    def setupController
      @controller = Controller.new(CLI.new(options[:verbose],
                                           options[:debug],
                                           options[:color]),
                                   options[:services])
    end
  end

  Cli.start(ARGV)
end
